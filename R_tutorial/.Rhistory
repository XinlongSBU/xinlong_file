4+4
ls
install.packages(c('pbdZMQ', 'repr', 'devtools'))  # repr is already on CRAN
devtools::install_github('IRkernel/IRdisplay')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()  # to r
devtools::install_github('IRkernel/IRdisplay')
install.packages('devtools')
devtools::install_github('IRkernel/IRdisplay')
library(devtools)
install.packages('devtools')
install.packages('IRkernal')
install.packages('IRkernel')
install.packages("IRkernel")
install.packages('Hmisc')
# use as.Date( ) to convert strings to dates
mydates <- as.Date(c("2007-06-22", "2004-02-13"))
mydates
# number of days between 6/22/07 and 2/13/04
days <- mydates[1] - mydates[2]
days
Sys.Date( ) # returns today's date.
date() # returns the current date and time.
# print today's date
today <- Sys.Date()
today
format(today, format="%B %d %Y")
# convert date info in format 'mm/dd/yyyy'
strDates <- c("01/05/1965", "08/16/1975")
strDates
dates <- as.Date(strDates, "%m/%d/%Y")
# convert dates to character data
strDates <- as.character(dates)
# define a function to transport a matrix
mytrans <- function(x) {
if (!is.matrix(x)) {      # if x is not a matrix
warning("argument is not a matrix: returning NA")
return(NA_real_)
}
y <- matrix(1, nrow=ncol(x), ncol=nrow(x))
for (i in 1:nrow(x)) {    # nrow(x) the number or rows in matrix x
for (j in 1:ncol(x)) {  # ncol(x) the number or columns in matrix x
y[j,i] <- x[i,j]
}
}
return(y)
}
# try it
z <- matrix(1:10, nrow=5, ncol=2)
z
tz <- mytrans(z)
tz
# transpose
mtcars
t(mtcars)
# transpose
y<-matrix(1:20, nrow=5,ncol=4)
y
t(y)
# creat a dataframe
a <- c(1,1,2,2)
b <- c(1,2,1,2)
d <- c(5,3,6,2)
e <- c(6,5,1,4)
mydata <- data.frame(a,b,d,e)
names(mydata) <- c("id","time","x1","x2") # variable names
mydata
library(reshape)
library(reshape)
install.packages("reshape")
library(reshape)
mdata <- melt(mydata, id=c("id","time"))
mdata
# cast the melted data
# cast(data, formula, function)
subjmeans <- cast(mdata, id~variable, mean)
timemeans <- cast(mdata, time~variable, mean)
View(subjmeans)
subjmeans
pnorm(100)
# normal quantile. value at the p percentile of normal distribution
qnorm(0)
# normal quantile. value at the p percentile of normal distribution
qnorm(0.5)
# normal quantile. value at the p percentile of normal distribution
qnorm(0.9)
# normal quantile. value at the 90 percentile of normal distribution
qnorm(0.9)
# normal quantile. value at the 90 percentile of normal distribution
qnorm(10)
# n random normal deviates with mean m and standard deviation sd.
rnorm(n=2, m=0,sd=1)
# n random normal deviates with mean m and standard deviation sd.
rnorm(n=50, m=0,sd=1)
# binomial distribution where size is the sample size
# and prob is the probability of a heads (pi)
dbinom(x=0.3, size=100, prob=0.5)
# binomial distribution where size is the sample size
# and prob is the probability of a heads (pi)
dbinom(x=3, size=100, prob=0.5)
# binomial distribution where size is the sample size
# and prob is the probability of a heads (pi)
dbinom(x=5, size=100, prob=0.5)
# binomial distribution where size is the sample size
# and prob is the probability of a heads (pi)
dbinom(x=50, size=100, prob=0.5)
# binomial distribution where size is the sample size
# and prob is the probability of a heads (pi)
dbinom(x=100, size=100, prob=0.5)
# binomial distribution where size is the sample size
# and prob is the probability of a heads (pi)
dbinom(x=60, size=100, prob=0.5)
# binomial distribution where size is the sample size
# and prob is the probability of a heads (pi)
dbinom(x=49, size=100, prob=0.5)
# binomial distribution where size is the sample size
# and prob is the probability of a heads (pi)
dbinom(x=40, size=100, prob=0.5)
# binomial distribution where size is the sample size
# and prob is the probability of a heads (pi)
dbinom(x=50, size=100, prob=0.5)
# prob of 0 to 5 heads of fair coin out of 10 flips
pbinom(q=0:5, size=10, prob=0.5)
# binomial distribution where size is the sample size
# and prob is the probability of a heads (pi)
dbinom(x=50, size=10, prob=0.5)
# binomial distribution where size is the sample size
# and prob is the probability of a heads (pi)
dbinom(x=40, size=10, prob=0.5)
# binomial distribution where size is the sample size
# and prob is the probability of a heads (pi)
dbinom(x=40, size=100, prob=0.5)
# prob of 0 to 5 heads of fair coin out of 10 flips
pbinom(q=0:5, size=100, prob=0.5)
# prob of 0 to 5 heads of fair coin out of 10 flips
pbinom(q=0:50, size=100, prob=0.5)
x <- c(1:10)
mean(x)
sd(x)
median(x)
quantile(x)
range(x)
sum(x)
min(x)
max(x)
scale(x)
# Other Useful Functions
seq(from=0 , to=20, by=2) # generate a sequence
rep(y, ntimes=3) # repeat y n times
# Other Useful Functions
y <- seq(from=0 , to=10, by=2) # generate a sequence
rep(y, ntimes=3) # repeat y n times
rep(y, ntimes=3) # repeat y n times
z <- rep(y, ntimes=3) # repeat y n times
z <- rep(y, ntimes=2) # repeat y n times
rep(y, 2) # repeat y n times
cut(y, n=5)
getwd()
setwd("/Users/sailor/Desktop/asro_work/xinlong_file/R_tutorial/")
attach(mtcars)
# sorting examples using the mtcars dataset
attach(mtcars)
# sort by mpg
newdata <- mtcars[order(mpg),]
View(newdata)
# sort by mpg and cyl
newdata <- mtcars[order(mpg, cyl),]
# sort by mpg
newdata1 <- mtcars[order(mpg),]
# sort by mpg and cyl
newdata2 <- mtcars[order(mpg, cyl),]
#sort by mpg (ascending) and cyl (descending)
newdata3 <- mtcars[order(mpg, -cyl),]
# define dataframe
authors <- data.frame(
## I(*) : use character columns of names to get sensible sort order
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
View(authors)
authorN <- within(authors, { name <- surname; rm(surname) })
View(authorN)
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
View(books)
# Merge authorN and books
m0 <- merge(authorN, books)
View(m0)
View(authorN)
View(authors)
View(books)
m1 <- merge(authors, books, by.x = "surname", by.y = "name")
View(m1)
View(m0)
