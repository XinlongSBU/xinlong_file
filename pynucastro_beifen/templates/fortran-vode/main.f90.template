program main
  use runtime_init_module
  use history_module, only: history_t
  use network
  use reaclib_rates, only: init_reaclib, net_screening_init
  use table_rates, only: init_tabular
  use data_wrangler, only: write_solution
  use burn_type_module, only: burn_t
  use integration_data, only: integration_status_t
  use vode_integrator_module, only: vode_integrator
  use extern_probin_module, only: rtol_spec, rtol_enuc, atol_spec, atol_enuc
  use probin_module, only: end_time, nsteps, temperature, density, &
       <probin_mass_fractions>(3)

  implicit none

  type(history_t) :: history
  type(burn_t) :: state_in, state_out
  type(integration_status_t) :: status
  integer i, neq, end_index
  double precision :: time_step
  double precision, parameter :: ZERO = 0.0d0
  
  ! Initialization
  call runtime_init(.true.)
  call init_network()
  call init_reaclib()
  call init_tabular()
  call net_screening_init()

  neq = nspec + 1
  time_step = end_time/nsteps

  ! Allocate history arrays
  allocate(history % T(nsteps+1))
  allocate(history % X(neq, nsteps+1))

  ! Print Physical Parameters
  write(*,*) 'Integrating starting with:'
  write(*,'(A,ES25.14)') 'T = ', temperature
  write(*,'(A,ES25.14)') 'Density = ', density

  ! Initialize the Integration
  state_in % rho = density
  state_in % T = temperature
  state_in % e = ZERO
  <yinit_nuc>(1)

  status % atol_spec = atol_spec
  status % atol_enuc = atol_enuc
  status % rtol_spec = rtol_spec
  status % rtol_enuc = rtol_enuc

  history % T(1) = ZERO
  history % X(1:nspec, 1) = state_in % xn(:)
  history % X(net_ienuc, 1) = state_out % e

  ! Do the integration
  do i = 1, nsteps
     call vode_integrator(state_in, state_out, time_step, history % T(i), status)
     if (status % integration_complete) then
        history % T(i+1) = history % T(i) + time_step
        history % X(1:nspec, i+1) = state_out % xn(:)
        history % X(net_ienuc, i+1) = state_out % e
        state_in = state_out
        end_index = i+1
     else
        write(*,*) "ERROR: Integration did not complete!"
        exit
     end if
  end do

  ! Write profile to output file
  call write_solution(history, end_index)

  ! Print output to console
  write(*,'(A,ES25.14)') 'Integrated to time: ', history % T(end_index)
  write(*,'(A,ES25.14)') 'Final enuc: ', history % X(net_ienuc, end_index)

  write(*,*) "Final Mass Fractions:"
  <final_net_print>(1)

  deallocate(history % T)
  deallocate(history % X)

end program main
