module network
  use physical_constants, only: erg_per_MeV, me, mn, mp, clight, gram_per_MeV, enuc_conv2
  
  implicit none

  public num_rate_groups

  ! Number of nuclear species in the network
  <nspec>(1)
  <nspec_evolve>(1)

  <nrates>(1)
  integer, parameter :: num_rate_groups = 4

  <nrat_tabular>(1)

  <nrat_reaclib>(1)

  ! Binding Energies Per Nucleon (MeV)
  double precision, dimension(nspec) :: ebind_per_nucleon

  ! Nucleon mass number A
  double precision, dimension(nspec) :: aion

  ! Inverse nucleon mass number A
  double precision, dimension(nspec) :: aion_inv

  ! Nucleon atomic number Z
  double precision, dimension(nspec) :: zion

  ! Nucleon atomic number N
  double precision, dimension(nspec) :: nion

  ! Nucleon mass energy
  double precision, dimension(nspec) :: mion
  
  ! Binding Energies (ergs)
  double precision, dimension(nspec) :: ebind

  ! Nuclides
  <jion>(1)

  integer :: net_ienuc = nspec + 1

  ! Reactions
  <nrxn>(1)

  ! reactvec indices
  integer, parameter :: i_rate        = 1
  integer, parameter :: i_drate_dt    = 2
  integer, parameter :: i_scor        = 3
  integer, parameter :: i_dscor_dt    = 4
  integer, parameter :: i_dqweak      = 5
  integer, parameter :: i_epart       = 6

contains

  subroutine init_network()
    integer :: i

    <ebind>(2)

    <aion>(2)

    <zion>(2)

    <nion>(2)

    do i = 1, nspec
       ebind(i) = ebind_per_nucleon(i) * aion(i) 
    end do

    ! Set the mass energy in erg
    mion(:) = (nion(:) * mn + zion(:) * (mp + me) &
         - ebind(:) * gram_per_MeV)*clight*clight

    ! Set aion_inv
    aion_inv(:) = 1.0d0/aion(:)

  end subroutine init_network

  subroutine ener_gener_rate(dydt, enuc)
    ! Computes the instantaneous energy generation rate
  
    implicit none

    double precision :: dydt(nspec), enuc

    ! This is basically e = m c**2

    enuc = sum(dydt(:) * mion(:)) * enuc_conv2

  end subroutine ener_gener_rate

end module network
